type Query {
  #MOVIE:
  getMovies(genre: String, director: String, originalLanguage: String): [Movie]
  getAllMovies: [Movie]
  getMoviesByActor(actorId: ID!): [Movie]

  #REVIEW:
  getUserReviews(userId: ID!): [Review]
  getReviewsByMovieId(movieId: ID!): [Review]

  #LEADERBOARD:
  getLeaderboard(genre: String): [Movie]

  #DIRECTOR
  getDirectors: [Director]

  #ACTOR:
  getActors: [Actor] # Fetch all actors
  getActorById(id: ID!): Actor # Fetch a specific actor by ID

  #USER
  getUserById(id: ID!): User
  getAllUsers: [User]

  #WATCHLIST
  getWatchlistById(id: ID!): Watchlist
  getAllWatchlists: [Watchlist]
  getWatchlistsByUserId(userId: ID!): [Watchlist]
  getPublicWatchlists: [Watchlist]
}

#TYPES

type Actor {
  id: ID!
  firstname: String!
  lastname: String!
  birthday: String
  heritage: String
  movies: [Movie] # Movies the actor has acted in
}

type Director {
  id: ID!
  firstname: String!
  lastname: String!
  birthday: String
  heritage: String
  movies: [Movie] # Movies directed by the director
}

type Genre {
  id: ID!
  genre: String!
  movies: [Movie]
}

type Movie {
  id: ID!
  title: String!
  genre: String!
  releaseDate: String!
  director: Director
  originalLanguage: String
  rating: Float
  length: Int
  reviews: [Review]  # Relationship to reviews
  actors: [Actor] # Actors in the movie
}

type Review {
  id: ID!
  movieId: ID!
  userId: ID!
  rating: Int!
  comment: String
  createdAt: String
}

type User {
  id: ID!
  name: String
  email: String
  watchlist: Watchlist
}

type Watchlist {
  id: ID!
  isPublic: Boolean!
  user: User!
  movies: [Movie]
}

type Mutation {
  addActor(firstname: String!, lastname: String!, birthday: String, heritage: String): Actor # Add a new actor

  addDirector(firstname: String!, lastname: String!, birthday: String, heritage: String): Director

  createReview(comment: String!, starRating: Int!, userId: ID!, movieId: ID!): Review
  updateReview(id: ID!, comment: String, starRating: Int): Review
  deleteReview(id: ID!): Boolean

  createWatchlist(name: String!, userId: ID!, isPrivate: Boolean): Watchlist
  addMovieToWatchlist(watchlistId: ID!, movieId: ID!): Watchlist
  removeMovieFromWatchlist(watchlistId: ID!, movieId: ID!): Watchlist
  setPublic(watchlistId: ID!, isPublic: Boolean!): Watchlist
  deleteWatchlist(id: ID!): Boolean

  createUser(name: String!, email: String!): User
  updateUser(id: ID!, name: String, email: String): User
  deleteUser(id: ID!): Boolean

  addMovie(title: String!, genre: String!, releaseDate: String!, director: String, originalLanguage: String, length: Int): Movie
  updateMovie(id: ID!, title: String, genre: String, releaseDate: String, director: String, originalLanguage: String, length: Int): Movie
  deleteMovie(id: ID!): Boolean
}






